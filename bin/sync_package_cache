#!/usr/bin/env python


import os
import argparse
import configparser

import pypi_downloader


def setup_parser():
    """Setup the parser instance."""

    prog_name = "sync_package_cache"
    description = ("Reads the provided config file and builds the package "
                   "cache according to the defined settings.")
    parser = argparse.ArgumentParser(prog=prog_name, description=description) 
    parser.add_argument('configfile', type=str, 
                        help="Path to a valid config file.")

    return parser


def parse_config(configfile):
    """Parse the config file."""

    if (not os.path.isfile(configfile)):
        raise OSError("No config file found at location '{}'"
                      .format(configfile))

    # delmiters=(':',':') to allow for = signs in package version specs
    config = configparser.ConfigParser(allow_no_value=True, 
                                       delimiters=(':',':'))
    config.read(configfile)

    # get (and possibly create) the defined cache folder
    cache_folder = config['settings'].get('cache_folder', fallback='./')
    packagetypes = config['settings'].get('packagetypes', fallback='wheel')
    cache_folder_abspath = os.path.abspath(cache_folder)
    pypi_downloader.create_directory(cache_folder_abspath)
    settings = {
        'cache_folder': os.path.abspath(cache_folder),
        'packagetypes': packagetypes.split(",")
    }

    package_list = []
    for item in config['packages']:
        print(item)
        package_list.append(item)

    return (settings, package_list)


if __name__ == "__main__":
    parser = setup_parser()
    config_path = os.path.abspath(parser.parse_args().configfile)
    settings, packages = parse_config(config_path)

    for package in packages:
        pypi_downloader.build_package_cache(settings, package)
