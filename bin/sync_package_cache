#!/usr/bin/env python

import os
import argparse
import configparser

from pypi_crawler.pypi_crawler import build_package_cache

def setup_parser():
    """Setup the parser instance."""

    prog_name = "sync_package_cache"
    description = ("Reads the provided config file and builds the package "
                   "cache according to the defined settings.")
    parser = argparse.ArgumentParser(prog=prog_name, description=description) 
    parser.add_argument('configfile', type=str, 
                        help="Path to a valid config file.")

    return parser


def parse_config(configfile):
    """Parse the config file."""

    if (not os.path.isfile(configfile)):
        raise OSError("No config file found at location '{}'"
                      .format(configfile))

    config = configparser.ConfigParser(allow_no_value=True)
    config.read(configfile)

    settings = {}
    python_version = config['settings'].get('python_version')
    cache_folder = config['settings'].get('cache_folder', fallback='./')
    preferred_type = config['settings'].get('preferred_type', 
                                            fallback='bdist_wheel')
    arch = config['settings'].get('arch')
    if (python_version == '2.7'):
        py_vers_str = 'py27'
    elif (python_version == '3.6'):
        py_vers_str = 'py36'
    else:
        raise ValueError("Unsupported python version. Allowed versions are "
                         "2.7 and 3.6")
    settings.update({'python_version': py_vers_str})
    settings.update({'cache_location': os.path.abspath(cache_folder)})
    settings.update({'package_type': preferred_type})
    settings.update({'arch': arch})

    package_list = []
    for item in config['packages']:
        package_list.append(item.lower())

    config_dict = {
        'settings': settings,
        'packages': package_list,
    }
    
    return config_dict

if __name__ == "__main__":
    parser = setup_parser()
    config_path = os.path.abspath(parser.parse_args().configfile)
    config = parse_config(config_path)
